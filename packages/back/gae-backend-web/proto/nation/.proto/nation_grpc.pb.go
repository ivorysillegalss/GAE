// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: nation.proto

package __proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NationService_QueryNation_FullMethodName = "/nation.NationService/QueryNation"
)

// NationServiceClient is the client API for NationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NationServiceClient interface {
	QueryNation(ctx context.Context, in *NationRequest, opts ...grpc.CallOption) (*NationResponse, error)
}

type nationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNationServiceClient(cc grpc.ClientConnInterface) NationServiceClient {
	return &nationServiceClient{cc}
}

func (c *nationServiceClient) QueryNation(ctx context.Context, in *NationRequest, opts ...grpc.CallOption) (*NationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationResponse)
	err := c.cc.Invoke(ctx, NationService_QueryNation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NationServiceServer is the server API for NationService service.
// All implementations must embed UnimplementedNationServiceServer
// for forward compatibility.
type NationServiceServer interface {
	QueryNation(context.Context, *NationRequest) (*NationResponse, error)
	mustEmbedUnimplementedNationServiceServer()
}

// UnimplementedNationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNationServiceServer struct{}

func (UnimplementedNationServiceServer) QueryNation(context.Context, *NationRequest) (*NationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNation not implemented")
}
func (UnimplementedNationServiceServer) mustEmbedUnimplementedNationServiceServer() {}
func (UnimplementedNationServiceServer) testEmbeddedByValue()                       {}

// UnsafeNationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NationServiceServer will
// result in compilation errors.
type UnsafeNationServiceServer interface {
	mustEmbedUnimplementedNationServiceServer()
}

func RegisterNationServiceServer(s grpc.ServiceRegistrar, srv NationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NationService_ServiceDesc, srv)
}

func _NationService_QueryNation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationServiceServer).QueryNation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationService_QueryNation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationServiceServer).QueryNation(ctx, req.(*NationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NationService_ServiceDesc is the grpc.ServiceDesc for NationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nation.NationService",
	HandlerType: (*NationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryNation",
			Handler:    _NationService_QueryNation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nation.proto",
}
