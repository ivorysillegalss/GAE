// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gae-backend-analysis/bootstrap"
	"gae-backend-analysis/consume"
	"gae-backend-analysis/cron"
	"gae-backend-analysis/executor"
	"gae-backend-analysis/repository"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeApp init application.
func InitializeApp() (*bootstrap.Application, error) {
	env := bootstrap.NewEnv()
	databases := bootstrap.NewDatabases(env)
	poolsFactory := bootstrap.NewPoolFactory()
	client := bootstrap.NewRedisDatabase(env)
	talentRepository := repository.NewTalentRepository(client)
	talentCron := cron.NewTalentCron(talentRepository, poolsFactory)
	cronExecutor := executor.NewCronExecutor(talentCron)
	kafkaConf := bootstrap.NewKafkaConf(env)
	talentEvent := consume.NewTalentEvent(env, kafkaConf, talentRepository)
	consumeExecutor := executor.NewConsumeExecutor(talentEvent)
	dataExecutor := executor.NewDataExecutor(client)
	bootstrapExecutor := bootstrap.NewExecutors(cronExecutor, consumeExecutor, dataExecutor)
	application := &bootstrap.Application{
		Env:          env,
		Databases:    databases,
		PoolsFactory: poolsFactory,
		Executor:     bootstrapExecutor,
	}
	return application, nil
}

// wire.go:

var appSet = wire.NewSet(bootstrap.NewEnv, bootstrap.NewPoolFactory, bootstrap.NewExecutors, bootstrap.NewKafkaConf, bootstrap.NewDatabases, bootstrap.NewRedisDatabase, repository.NewTalentRepository, consume.NewTalentEvent, cron.NewTalentCron, executor.NewCronExecutor, executor.NewConsumeExecutor, executor.NewDataExecutor, wire.Struct(new(bootstrap.Application), "*"))
