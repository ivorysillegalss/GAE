// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gae-backend-storage/bootstrap"
	"gae-backend-storage/executor"
	"gae-backend-storage/handler"
	"gae-backend-storage/repository"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeApp init application.
func InitializeApp() (*bootstrap.Application, error) {
	env := bootstrap.NewEnv()
	databases := bootstrap.NewDatabases(env)
	poolsFactory := bootstrap.NewPoolFactory()
	channels := bootstrap.NewChannel()
	//client := bootstrap.NewRedisDatabase(env)
	elasticsearchClient := bootstrap.NewEsEngine(env)
	rpcEngine := bootstrap.NewRpcEngine(env)
	searchEngine := bootstrap.NewSearchEngine(elasticsearchClient)
	grpcExecutor := executor.NewGrpcExecutor(rpcEngine, searchEngine)
	bootstrapExecutor := bootstrap.NewExecutors(grpcExecutor)
	engines := handler.NewStorageEngine(searchEngine)
	engine := bootstrap.NewStorageEngine(engines)
	application := &bootstrap.Application{
		StorageEngine: engine,
		Env:           env,
		Databases:     databases,
		PoolsFactory:  poolsFactory,
		Channels:      channels,
		Executor:      bootstrapExecutor,
		SearchEngine:  searchEngine,
	}
	return application, nil
}

// wire.go:

var appSet = wire.NewSet(bootstrap.NewEnv, bootstrap.NewDatabases, bootstrap.NewRedisDatabase, bootstrap.NewMysqlDatabase, bootstrap.NewPoolFactory, bootstrap.NewChannel, bootstrap.NewExecutors, bootstrap.NewEsEngine, bootstrap.NewSearchEngine, bootstrap.NewRpcEngine, repository.NewRankRepository, repository.NewUserRepository, wire.Struct(new(bootstrap.Application), "*"))
